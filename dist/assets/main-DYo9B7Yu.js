import{S as $,P as A,A as R,W as k,G as O,V as E,O as F,R as Z,a as j,D as B,C as G,M as J,B as K,b as N,c as Q}from"./GLTFLoader-B4-0SRwS.js";import _ from"https://cdn.jsdelivr.net/npm/lil-gui@0.19/+esm";import{O as ee}from"./OrbitControls-ASKD4vj_.js";let L;const s=document.querySelector("#week-1-canvas"),I=new $,C=new A(75,s.clientWidth/s.clientHeight,.1,1e3);C.position.z=1;const te=new R("white",10);I.add(te);const w=new k({canvas:s});w.setSize(s.clientWidth,s.clientHeight,!1);w.setAnimationLoop(ne);const ie=new O;ie.load("hello-world.glb",function(e){L=e.scene,I.add(L)});function ne(){L&&(L.rotation.y+=.01),w.render(I,C)}window.addEventListener("resize",()=>{C.aspect=s.clientWidth/s.clientHeight,C.updateProjectionMatrix(),w.setSize(s.clientWidth,s.clientHeight,!1),w.setPixelRatio(Math.min(window.devicePixelRatio,2))});const i=document.querySelector("#week-2-canvas"),v=i.getBoundingClientRect(),d=new _;d.open(!1);d.show(!1);const n={camera:"Perspective Camera",fov:20,pointLights:!0,ambientLights:!0,directionalLights:!0,rectLights:!0};let f;const oe=new G,h=new k({canvas:i,antialias:!0});h.setClearColor(16119287);h.setSize(i.clientWidth,i.clientHeight,!1);h.setAnimationLoop(se);const r=new $,o=new A(20,i.clientWidth/i.clientHeight,.1,1e3);o.position.x=5;o.position.z=6;o.position.y=5;o.lookAt(new E(0,0,0));const c=new F(i.clientWidth/-100,i.clientWidth/100,i.clientHeight/100,i.clientHeight/-100,1,1e3);c.position.x=5;c.position.z=6;c.position.y=5;c.lookAt(new E(0,0,0));const y=new Z(16562691,1,10,10);y.position.set(0,0,-5);y.lookAt(0,0,0);r.add(y);const p=new j("white",10);p.position.z=3;p.position.x=2;r.add(p);const u=new j("red",20);u.position.set(1,2,3);r.add(u);const T=new R("white",.1);r.add(T);const M=new B(16285805,5);M.position.set(3,3,15);M.castShadow=!0;r.add(M);const ae=new O;ae.load("facade.glb",function(e){f=e.scene,f.scale.set(1e3,1e3,1e3),f.traverse(t=>{t.isMesh&&(t.castShadow=!0,t.recieveShadow=!0)}),console.log(f),r.add(f)});function se(){const e=oe.getElapsedTime();p.position.x=Math.sin(e)*3,p.position.y=Math.cos(e)*3,u.position.x=Math.sin(e*.5)*5+3,u.position.y=Math.cos(e*.5)*5,n.camera=="Perspective Camera"&&h.render(r,o),n.camera=="Orthographic Camera"&&h.render(r,c)}d.add(n,"camera",["Perspective Camera","Orthographic Camera"]);d.add(n,"fov",10,100,1).onChange(e=>{o.fov=n.fov,o.updateProjectionMatrix()});d.add(n,"pointLights").onChange(e=>{p.visible=n.pointLights,u.visible=n.pointLights});d.add(n,"ambientLights").onChange(e=>{T.visible=n.ambientLights});d.add(n,"directionalLights").onChange(e=>{M.visible=n.directionalLights});d.add(n,"rectLights").onChange(e=>{y.visible=n.rectLights});window.addEventListener("resize",()=>{o.aspect=i.clientWidth/i.clientHeight,o.updateProjectionMatrix(),c.aspect=i.clientWidth/i.clientHeight,c.updateProjectionMatrix(),h.setSize(i.clientWidth,i.clientHeight,!1),h.setPixelRatio(Math.min(window.devicePixelRatio,2))});i.addEventListener("mousemove",ce);function ce(e){o.position.x=(e.pageX-v.left)*.01,o.position.y=(e.pageY-v.top)*.01+3,c.position.x=(e.pageX-v.left)*.01,c.position.y=(e.pageY-v.top)*.01+3}const a=document.querySelector("#week-3-canvas"),re=new G;let H=0;const de=1,P=new $,g=new A(75,a.clientWidth/a.clientHeight,.1,1e3),V=new ee(g,a);g.position.set(3.5,-5.5,3);g.lookAt(2,-4,-1);V.update();const le=new R("white",1);P.add(le);const q=new B(16777215,1);q.position.set(-.5,-.3,1);P.add(q);const z=30,S=30,D=z*S,U=[],X=[];for(let e=0;e<S;e++)for(let t=0;t<z;t++)U.push(t-(z-1)/2),X.push(e-(S-1)/2);const l=[],W=[0,6,15,21,30,33,36,39,48,51,54,57],b=[];for(let e=0;e<D;e++)b.push(0);for(let e=0;e<D;e++){const t=new J(new K,new N);t.material.color.r=Math.random(),t.position.x=U[e],t.position.y=X[e],l.push(t)}l.forEach(e=>{P.add(e)});const m=new k({canvas:a,antialias:!0});m.setClearColor(16119287);m.setSize(a.clientWidth,a.clientHeight,!1);m.setAnimationLoop(he);function he(){const e=re.getDelta();H+=e,H>=de&&(pe(),H=0),ge(),V.update(),m.render(P,g)}function pe(){for(let e=0;e<l.length;e++){const t=Math.random();Math.random()<.1?b[e]=t*3:b[e]=t}}function ge(){for(let e=0;e<l.length;e++){for(let t=0;t<W.length;t++){const x=new E;x.fromArray(l[e].geometry.attributes.position.array,W[t]);const Y=Q.lerp(x.z,b[e],.025);x.z=Y,x.toArray(l[e].geometry.attributes.position.array,W[t])}l[e].geometry.attributes.position.needsUpdate=!0}}window.addEventListener("resize",()=>{g.aspect=a.clientWidth/a.clientHeight,g.updateProjectionMatrix(),m.setSize(a.clientWidth,a.clientHeight,!1),m.setPixelRatio(Math.min(window.devicePixelRatio,2))});
